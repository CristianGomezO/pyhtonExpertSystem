import collections
import collections.abc
collections.Mapping = collections.abc.Mapping

import tkinter as tk
from tkinter import StringVar, OptionMenu
from experta import *

class CropFact(Fact):
    """Information about the crop conditions"""
    def __repr__(self):
        return f"CropFact(soil={self['soil']}, climate={self['climate']})"

class RecommendationFact(Fact):
    """Stores the recommendation generated by the expert system"""
    def __repr__(self):
        return f"RecommendationFact(recommendation={self['recommendation']})"

class CropExpert(KnowledgeEngine):
    
    @Rule(CropFact(soil='sandy', climate='tropical'))
    def recommend_coconuts(self):
        self.declare(RecommendationFact(recommendation="Plant coconut trees"))
        print("Rule Activated: Recommend Coconut Trees")
    
    @Rule(CropFact(soil='loamy', climate='temperate'))
    def recommend_wheat(self):
        self.declare(RecommendationFact(recommendation="Plant wheat or barley"))
        print("Rule Activated: Recommend Wheat or Barley")
    
    @Rule(RecommendationFact(recommendation=MATCH.rec))
    def show_recommendation(self, rec):
        global recommendation_text
        recommendation_text = rec
        print(f"Recommendation: {rec}")
        print(f"Facts: {self.facts}")
        print(f"-----------------------------------------------")

# Configuración de la ventana de la aplicación
window = tk.Tk()
window.title('Crop Advisor')

# Opciones para los selects
soil_options = ['sandy', 'loamy']
climate_options = ['tropical', 'temperate']

# Variables para los selects
soil_var = StringVar(window)
climate_var = StringVar(window)

# Set default values
soil_var.set(soil_options[0])
climate_var.set(climate_options[0])

# Select para tipo de suelo
tk.Label(window, text="Soil Type:").grid(row=0)
soil_select = OptionMenu(window, soil_var, *soil_options)
soil_select.grid(row=0, column=1)

# Select para clima
tk.Label(window, text="Climate:").grid(row=1)
climate_select = OptionMenu(window, climate_var, *climate_options)
climate_select.grid(row=1, column=1)

# Variable para mostrar la recomendación
recommendation = StringVar()
tk.Label(window, textvariable=recommendation).grid(row=2, columnspan=2)

# Widget de texto para mostrar los hechos
facts_text = tk.Text(window, height=10, width=40)
facts_text.grid(row=4, columnspan=2)

def run_expert_system():
    global recommendation_text
    recommendation_text = "No recommendation available."
    
    # Limpiar el widget de texto de los hechos
    facts_text.delete('1.0', tk.END)

    # Crear el motor de reglas y resetearlo
    engine = CropExpert()
    engine.reset()

    # Insertar los hechos a partir de la selección del usuario
    engine.declare(CropFact(soil=soil_var.get(), climate=climate_var.get()))

    # Ejecutar el sistema experto
    engine.run()

    # Actualizar la recomendación en la GUI
    recommendation.set(recommendation_text)
    
    # Mostrar los hechos actuales en el widget de texto
    for fact_id, fact in engine.facts.items():
        facts_text.insert(tk.END, f"Fact {fact_id}: {fact}\n")

# Botón para ejecutar el sistema experto
tk.Button(window, text="Recommend", command=run_expert_system).grid(row=3, columnspan=2)

# Iniciar el loop de la interfaz gráfica
window.mainloop()
